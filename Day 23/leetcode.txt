1480. Running Sum of 1d Array
Easy
7.5K
330
Companies
Given an array nums. We define a running sum of an array as runningSum[i] = sum(nums[0]â€¦nums[i]).

Return the running sum of nums.

 

Example 1:

Input: nums = [1,2,3,4]
Output: [1,3,6,10]
Explanation: Running sum is obtained as follows: [1, 1+2, 1+2+3, 1+2+3+4].

class Solution {
public:
    vector<int> runningSum(vector<int>& nums) {
        for(int i=1 ; i<nums.size(); i++)
        {
            nums[i]=nums[i]+nums[i-1];
        }
        return nums;
    }
};


1464. Maximum Product of Two Elements in an Array
Easy
1.8K
196
Companies
Given the array of integers nums, you will choose two different indices i and j of that array. Return the maximum value of (nums[i]-1)*(nums[j]-1).
 

Example 1:

Input: nums = [3,4,5,2]
Output: 12 
Explanation: If you choose the indices i=1 and j=2 (indexed from 0), you will get the maximum value, that is, (nums[1]-1)*(nums[2]-1) = (4-1)*(5-1) = 3*4 = 12. 

class Solution {
public:
    int maxProduct(std::vector<int>& nums) {
        if (nums.size() < 2) {
            return -1;
        }
        std::sort(nums.begin(), nums.end(), std::greater<int>());
        return (nums[0]-1)*(nums[1]-1);
    }
};

  2733. Neither Minimum nor Maximum
Easy
285
10
Companies
Given an integer array nums containing distinct positive integers, find and return any number from the array that is neither the minimum nor the maximum value in the array, or -1 if there is no such number.

Return the selected integer.

 

Example 1:

Input: nums = [3,2,1,4]
Output: 2
Explanation: In this example, the minimum value is 1 and the maximum value is 4. Therefore, either 2 or 3 can be valid answers.


class Solution {
public:
    int findNonMinOrMax(vector<int>& nums) {
        if(nums.size()<=2){
            return -1;
        }
        int MINI = *std::min_element(nums.begin(), nums.end());
        int MAXI = *std::max_element(nums.begin(), nums.end());
        for(int i=0 ; i<nums.size();i++){
            if(nums[i]!=MINI && nums[i]!=MAXI){
                return nums[i];
            }
        }
        return -1;
    }
};