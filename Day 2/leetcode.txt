70. Climbing Stairs
You are climbing a staircase. It takes n steps to reach the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

 

Example 1:

Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
Example 2:

Input: n = 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step

class Solution {
public:
    int climbStairs(int n) {
        int a =1;
        int b=2;
        int ans;
        if(n==1){
            return 1;
        }
        if(n==2){
            return 2;
        }
        for(int i=3 ; i<=n ; i++){
            ans=a+b;
            a=b;
            b=ans;
        }
        return ans;
    }
};

2529. Maximum Count of Positive Integer and Negative Integer
Given an array nums sorted in non-decreasing order, return the maximum between the number of positive integers and the number of negative integers.

In other words, if the number of positive integers in nums is pos and the number of negative integers is neg, then return the maximum of pos and neg.
Note that 0 is neither positive nor negative.

 

Example 1:

Input: nums = [-2,-1,-1,1,2,3]
Output: 3
Explanation: There are 3 positive integers and 3 negative integers. The maximum count among them is 3.
Example 2:

Input: nums = [-3,-2,-1,0,0,1,2]
Output: 3
Explanation: There are 2 positive integers and 3 negative integers. The maximum count among them is 3.
Example 3:

Input: nums = [5,20,66,1314]
Output: 4
Explanation: There are 4 positive integers and 0 negative integers. The maximum count among them is 4.


class Solution {
public:
    int maximumCount(vector<int>& nums) {
        int a = 0;  
        int b = 0;  
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] < 0) {
                a = a + 1;  
            } else if (nums[i] > 0) {
                b = b + 1;  
            }
           
        }
        return max(a, b);
    }
};

