1743. Restore the Array From Adjacent Pairs
Medium
1.9K
67
Companies
There is an integer array nums that consists of n unique elements, but you have forgotten it. However, you do remember every pair of adjacent elements in nums.

You are given a 2D integer array adjacentPairs of size n - 1 where each adjacentPairs[i] = [ui, vi] indicates that the elements ui and vi are adjacent in nums.

It is guaranteed that every adjacent pair of elements nums[i] and nums[i+1] will exist in adjacentPairs, either as [nums[i], nums[i+1]] or [nums[i+1], nums[i]]. The pairs can appear in any order.

Return the original array nums. If there are multiple solutions, return any of them.

 

Example 1:

Input: adjacentPairs = [[2,1],[3,4],[3,2]]
Output: [1,2,3,4]
Explanation: This array has all its adjacent pairs in adjacentPairs.
Notice that adjacentPairs[i] may not be in left-to-right order.
Example 2:

Input: adjacentPairs = [[4,-2],[1,4],[-3,1]]
Output: [-2,4,1,-3]
Explanation: There can be negative numbers.
Another solution is [-3,1,4,-2], which would also be accepted.
Example 3:

Input: adjacentPairs = [[100000,-100000]]
Output: [100000,-100000]
 



 class Solution {
public:
    vector<int> restoreArray(vector<vector<int>>& adjacentPairs) {
        vector<int> ans;
        unordered_map<int,vector<int>> mp;
        for(auto it: adjacentPairs){
            mp[it[0]].push_back(it[1]);
            mp[it[1]].push_back(it[0]);
        }
        set<int> chk;
        int temp=-1e9;
        for(auto it: mp){
            if(it.second.size()==1){
                temp=it.first;
                break;
            }
        }
        chk.insert(temp);
        ans.push_back(temp);
        
        while(1){
            auto str=mp[temp];
            if(str.size()==1 && chk.count(str[0]))break;
            else if(chk.count(str[0]) && chk.count(str[1]))break;

            if(!chk.count(str[0])){
                temp=str[0];
                ans.push_back(temp);
                chk.insert(temp);
            }
            else if(!chk.count(str[1])){
                temp=str[1];
                ans.push_back(temp);
                chk.insert(temp);
            }
        }
        return ans;
    }
};